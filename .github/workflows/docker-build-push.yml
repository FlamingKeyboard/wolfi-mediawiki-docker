name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    # Also trigger on tag creation
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  # Enable manual runs from the Actions tab
  workflow_dispatch:
  # Run on a schedule (weekly) to keep the image up-to-date
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight UTC

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/wolfi-mediawiki

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Required for Trivy vulnerability scanner
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata for the Docker image
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Generate tags based on the following events/git refs
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./1.43.0/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Scan the image for vulnerabilities with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build if vulnerabilities are found

      # Upload vulnerability report
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && success() && github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'

      # Add a summary with scan results
      - name: Post build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "📦 Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ Tags: ${TAGS}" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Scan completed with Trivy" >> $GITHUB_STEP_SUMMARY
        env:
          TAGS: ${{ steps.meta.outputs.tags }}