name: Build and Push MediaWiki Docker Image
on:
  push:
    branches: [ main, master ]
    # Also trigger on tag creation
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  # Enable manual runs from the Actions tab
  workflow_dispatch:
  # Run on a schedule (daily) to keep the image up-to-date
  schedule:
    - cron: '0 0 * * *'  # Every day at midnight UTC
env:
  REGISTRY: docker.io
  IMAGE_NAME: gavinfullertx582/wolfi-mediawiki
jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Required for Trivy vulnerability scanner
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login to Docker Hub (needed for the build script to push images)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Use our build script to handle detection, building, testing, and initial pushing
      - name: Build, test, and push with build script
        id: build-script
        run: |
          chmod +x ./build.sh
          # Run script with --output-versions to generate version info file
          ./build.sh --username ${{ secrets.DOCKERHUB_USERNAME }} --token ${{ secrets.DOCKERHUB_TOKEN }} --auto-push --output-versions
          
          # Load the versions from the output file
          if [ -f "version_info.env" ]; then
            cat version_info.env >> $GITHUB_ENV
            echo "Successfully loaded version information"
            echo "PHP_VERSION: $PHP_VERSION"
            echo "MEDIAWIKI_VERSION: $MEDIAWIKI_VERSION"
            echo "MEDIAWIKI_MAJOR_VERSION: $MEDIAWIKI_MAJOR_VERSION"
          else
            echo "::error::Version information file not found"
            exit 1
          fi
      
      # Pull the image for scanning (using the one that our build script created and pushed)
      - name: Pull image for scanning
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:scan-target
      
      # Scan the image for vulnerabilities with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  # Don't fail the build on vulnerabilities - just report them
        with:
          image-ref: '${{ env.IMAGE_NAME }}:scan-target'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
      
      # Upload vulnerability report
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Build for additional platforms and push again (only if not a pull request)
      # This step leverages Docker Buildx for multi-platform builds
      - name: Build and push multi-platform
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./build
          file: ./build/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.MEDIAWIKI_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.MEDIAWIKI_MAJOR_VERSION }}
          build-args: |
            PHP_VERSION=${{ env.PHP_VERSION }}
            MEDIAWIKI_VERSION=${{ env.MEDIAWIKI_VERSION }}
            MEDIAWIKI_MAJOR_VERSION=${{ env.MEDIAWIKI_MAJOR_VERSION }}
          cache-from: type=gha
          platforms: linux/amd64,linux/arm64
      
      # Add a summary with scan results and version info
      - name: Post build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "📦 Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ Tags: latest, ${{ env.MEDIAWIKI_VERSION }}, ${{ env.MEDIAWIKI_MAJOR_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "PHP Version: ${{ env.PHP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "MediaWiki Version: ${{ env.MEDIAWIKI_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Scan completed with Trivy" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Multi-platform builds: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY